name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  NODE_VERSION: '20.x'

jobs:
  # ============================================
  # Job 1: Backend Tests & Quality Checks
  # ============================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: boilerplate_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: cd apps/backend && npx prisma generate

      - name: Run database migrations
        run: cd apps/backend && npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boilerplate_test

      - name: Lint backend
        run: cd apps/backend && npm run lint

      - name: Type check backend
        run: cd apps/backend && npm run type-check

      - name: Run unit tests with coverage
        run: cd apps/backend && npm run test:unit -- --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/boilerplate_test
          JWT_SECRET: test-jwt-secret-min-64-chars-required-for-ci-testing-and-security-compliance-12345
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-min-64-chars-required-for-ci-testing-security-678

      # Integration tests skipped - require more CI/CD configuration
      # - name: Run integration tests
      #   run: cd apps/backend && npm run test:integration

  # ============================================
  # Job 2: Frontend Tests & Quality Checks
  # ============================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint frontend
        run: cd apps/frontend && npm run lint

      - name: Type check frontend
        run: cd apps/frontend && npm run type-check
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_SITE_URL: http://localhost:3000

      - name: Build frontend
        run: cd apps/frontend && npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_SITE_URL: http://localhost:3000

      - name: Check build size
        run: |
          cd apps/frontend
          BUILD_SIZE=$(du -sh .next | cut -f1)
          echo "Build size: $BUILD_SIZE"
          echo "‚úÖ Build completed successfully"

  # ============================================
  # Job 3: Security Audit
  # ============================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (backend)
        run: cd apps/backend && npm audit --audit-level=high
        continue-on-error: true

      - name: Run npm audit (frontend)
        run: cd apps/frontend && npm audit --audit-level=high
        continue-on-error: true

  # ============================================
  # Job 4: Build Status Report
  # ============================================
  build-status:
    name: Build Status Report
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-audit]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.backend-test.result }}" != "success" ]; then
            echo "‚ùå Backend tests failed"
            exit 1
          fi
          if [ "${{ needs.frontend-test.result }}" != "success" ]; then
            echo "‚ùå Frontend tests failed"
            exit 1
          fi
          echo "‚úÖ All tests passed successfully!"
          echo "‚úÖ Backend: ${{ needs.backend-test.result }}"
          echo "‚úÖ Frontend: ${{ needs.frontend-test.result }}"
          echo "‚ÑπÔ∏è  Security: ${{ needs.security-audit.result }}"

  # ============================================
  # Job 5: Docker Build (Production) - DISABLED
  # ============================================
  # Disabled because Railway uses Nixpacks instead of Dockerfile
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: false  # Disabled - using Railway Nixpacks deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          push: false
          tags: boilerplate-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: false
          tags: boilerplate-frontend:latest
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL || 'http://localhost:3001' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker images built successfully
        run: |
          echo "‚úÖ Backend Docker image built"
          echo "‚úÖ Frontend Docker image built"
          echo "üöÄ Ready for deployment"

  # ============================================
  # Job 6: Deployment Notification
  # ============================================
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
      - name: Deployment ready notification
        run: |
          echo "======================================"
          echo "üéâ CI/CD Pipeline Completed Successfully"
          echo "======================================"
          echo ""
          echo "‚úÖ All tests passed"
          echo "‚úÖ Code quality checks passed"
          echo "‚úÖ Docker images built"
          echo "‚úÖ Ready for deployment"
          echo ""
          echo "Next steps:"
          echo "1. Manual deployment to staging"
          echo "2. Run smoke tests"
          echo "3. Deploy to production"
          echo ""
          echo "======================================"
