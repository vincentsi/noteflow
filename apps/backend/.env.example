# ==============================================================================
# ENVIRONMENT CONFIGURATION
# ==============================================================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env to git (it's in .gitignore)

# ==============================================================================
# NODE ENVIRONMENT
# ==============================================================================
# Options: development, production, test, staging
NODE_ENV="development"

# Server port
PORT="3001"

# ==============================================================================
# DATABASE
# ==============================================================================
# PostgreSQL connection string
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/noteflow_dev"

# ==============================================================================
# JWT SECRETS (CHANGE IN PRODUCTION!)
# ==============================================================================
# SECURITY: Generate strong secrets with:
# node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
#
# IMPORTANT: Use DIFFERENT secrets for access and refresh tokens
# Minimum 32 characters required (enforced by Zod validation)

JWT_SECRET="CHANGE_ME_64_CHARS_MINIMUM_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
JWT_REFRESH_SECRET="CHANGE_ME_64_CHARS_MINIMUM_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"

# ==============================================================================
# FRONTEND URL (CORS Configuration)
# ==============================================================================
# Single origin:
FRONTEND_URL="http://localhost:3000"
#
# Multiple origins (comma-separated):
# FRONTEND_URL="http://localhost:3000,https://yourdomain.com,https://www.yourdomain.com"
#
# SECURITY: Wildcard (*) is NOT allowed

# ==============================================================================
# REDIS (Optional but Recommended)
# ==============================================================================
# Redis is used for:
# - Caching (user data, subscriptions)
# - CSRF tokens (~1ms vs ~100ms DB)
# - Rate limiting counters
# - Distributed locks (multi-instance)
# - Job queues (BullMQ)
#
# Local Redis (development only, no TLS):
REDIS_URL="redis://localhost:6379"
#
# Local Redis with password (development):
# REDIS_URL="redis://:password@localhost:6379"
#
# Production Redis with TLS (recommended):
# REDIS_URL="rediss://:password@redis-server:6379"
#
# Redis Cloud with TLS (e.g., Upstash, AWS ElastiCache):
# REDIS_URL="rediss://default:password@host:port"
#
# SECURITY: Use rediss:// (with TLS) in production, not redis://

# ==============================================================================
# STRIPE (Optional - Payment Processing)
# ==============================================================================
# Get your keys from: https://dashboard.stripe.com/test/apikeys
#
# Test Mode (for development):
STRIPE_SECRET_KEY="sk_test_..."
STRIPE_PUBLISHABLE_KEY="pk_test_..."
STRIPE_WEBHOOK_SECRET="whsec_..."
#
# Production Mode:
# STRIPE_SECRET_KEY="sk_live_..."
# STRIPE_PUBLISHABLE_KEY="pk_live_..."
# STRIPE_WEBHOOK_SECRET="whsec_..."

# ==============================================================================
# EMAIL SERVICE (Optional - Resend)
# ==============================================================================
# Get your API key from: https://resend.com/api-keys
#
# Resend API Key:
RESEND_API_KEY="re_..."
#
# Email sender address (must be verified in Resend):
EMAIL_FROM="noreply@yourdomain.com"
#
# IMPORTANT: In production, EMAIL_FROM must be a verified domain

# ==============================================================================
# MONITORING (Optional - Sentry)
# ==============================================================================
# Get your DSN from: https://sentry.io/settings/projects/
#
# Sentry DSN:
SENTRY_DSN="https://xxxxx@xxxxx.ingest.sentry.io/xxxxx"
#
# App Version (optional, for release tracking):
# APP_VERSION="1.0.0"

# ==============================================================================
# AWS S3 BACKUPS (Optional)
# ==============================================================================
# AWS credentials for automated database backups to S3
#
# AWS Access Keys:
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_REGION="us-east-1"
AWS_S3_BACKUP_BUCKET=""
#
# If not configured, backups are stored locally in apps/backend/backups/

# ==============================================================================
# BACKUP CONFIGURATION
# ==============================================================================
# Backup retention (in days):
BACKUP_RETENTION_DAYS="7"
#
# Backup cron schedule (default: daily at 2 AM):
# Format: "minute hour day month weekday"
BACKUP_CRON_SCHEDULE="0 2 * * *"
#
# Examples:
# Every 6 hours: "0 */6 * * *"
# Every day at midnight: "0 0 * * *"
# Every Sunday at 3 AM: "0 3 * * 0"

# ==============================================================================
# CLEANUP CONFIGURATION (Optional - Token cleanup)
# ==============================================================================
# Number of tokens to delete per batch (default: 1000)
CLEANUP_BATCH_SIZE="1000"
#
# Pause between batches in milliseconds (default: 100)
CLEANUP_PAUSE_MS="100"

# ==============================================================================
# METRICS SECURITY (Optional - IP Whitelisting)
# ==============================================================================
# Restrict metrics endpoint (/metrics) to specific IP addresses
# Comma-separated list of allowed IPs
#
# Development (allow all IPs):
METRICS_ALLOWED_IPS=""
#
# Production (restrict to Prometheus server + localhost):
# METRICS_ALLOWED_IPS="127.0.0.1,::1,10.0.0.5"
#
# Production with multiple IPs:
# METRICS_ALLOWED_IPS="127.0.0.1,::1,10.0.0.5,192.168.1.100"
#
# SECURITY: Set this in production to prevent unauthorized metrics access

# ==============================================================================
# STRIPE WEBHOOK SECURITY (Optional - IP Whitelisting)
# ==============================================================================
# Restrict Stripe webhook endpoint to known Stripe IP addresses
# Provides defense-in-depth security layer
#
# Development (allow all IPs for testing):
STRIPE_WEBHOOK_ALLOWED_IPS=""
#
# Production (restrict to Stripe IPs only):
# Get latest IPs from: https://stripe.com/docs/ips
# STRIPE_WEBHOOK_ALLOWED_IPS="3.18.12.63,3.130.192.231,13.235.14.237,13.235.122.149,18.211.135.69,35.154.171.200,52.15.183.38,54.88.130.119,54.88.130.237,54.187.174.169,54.187.205.235,54.187.216.72"
#
# SECURITY: Set this in production to prevent webhook spam/DDoS attacks
# NOTE: This is defense-in-depth, signature verification is still required

# ==============================================================================
# DEVELOPMENT NOTES
# ==============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Generate strong JWT secrets (see command above)
# 3. Configure database connection
# 4. Optional: Set up Redis for better performance
# 5. Optional: Configure Stripe for payments
# 6. Optional: Configure Resend for emails
# 7. Run: npm run db:push (to sync database schema)
# 8. Run: npm run dev (to start server)

# ==============================================================================
# PRODUCTION CHECKLIST
# ==============================================================================
# ✅ Use strong JWT secrets (64+ characters)
# ✅ Use different secrets for JWT_SECRET and JWT_REFRESH_SECRET
# ✅ Configure FRONTEND_URL with your actual domain
# ✅ Enable Redis (required for production performance)
# ✅ Configure Sentry (error tracking)
# ✅ Configure Resend (email service)
# ✅ Configure Stripe (if using payments)
# ✅ Configure S3 backups (recommended for production)
# ✅ Set NODE_ENV=production
# ✅ Use environment variables (not .env file) in production
# ✅ Never commit .env to git

# ==============================================================================
# SECURITY WARNINGS
# ==============================================================================
# ⚠️  NEVER use default/example secrets in production
# ⚠️  NEVER commit .env file to git
# ⚠️  NEVER expose secrets in logs or error messages
# ⚠️  NEVER reuse secrets across environments
# ⚠️  ROTATE secrets regularly (every 90 days recommended)
